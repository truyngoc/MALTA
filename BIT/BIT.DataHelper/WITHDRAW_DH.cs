
// =============================================
// This Class is generated by BuildProject
// Author:	Bop
// Create date:	17/08/2016 11:31
// Description:	
// Revise History:	
// =============================================

using System;
using System.Data;
using System.Data.SqlClient;
using System.Data.Sql;
using System.Linq;
using System.Collections.Generic;
using BIT.Objects;
using BIT.Common;
using BIT.DataHelper;
using Microsoft.Practices.EnterpriseLibrary.Data;

namespace BIT.DataHelper
{
    public class WITHDRAW_DH : DataAccessBase
	{
        public void InsertItem(WITHDRAW obj)
        {
            defaultDB.ExecuteNonQuery("sp_WITHDRAW_Insert"
                , obj.CodeId
                , obj.Amount
                , obj.Date_Create
                , obj.Wallet
                );
        }

        public void UpdateItem(WITHDRAW obj)
        {
            defaultDB.ExecuteNonQuery("sp_RECEIVE_Update"
                , obj.ID, obj.CodeId, Decimal.Parse(obj.Amount.ToString()), obj.Date_Create, obj.TransactionId, obj.Status, obj.Wallet);
        }
        public void UpdateTranSactionWithdraw(int ID, string CodeId, Decimal Amount)
        {
            defaultDB.ExecuteNonQuery("sp_WithDraw_UpdateTranSactionWithdraw"
                , ID,CodeId, Amount);
        }
        public void DeleteItem(int ID)
        {
            defaultDB.ExecuteNonQuery("sp_WALLET_Delete"
                , ID);
        }

        public WITHDRAW SelectItem(int ID)
        {
            return defaultDB.ExecuteSprocAccessor<WITHDRAW>("sp_WITHDRAW_SelectItem"
                , ID).FirstOrDefault();
        }

        public IEnumerable<WITHDRAW> SelectAllItems(string codeID)
        {
            return defaultDB.ExecuteSprocAccessor<WITHDRAW>("sp_WITHDRAW_SelectAllItemByCodeId", codeID);
        }
        
        public IEnumerable<WITHDRAW> SelectGHBlockChain()
        {
            return defaultDB.ExecuteSprocAccessor<WITHDRAW>("sp_Receive_SelectGHBlockChain");
        }

        public bool IsExistsItem(int ID)
        {
            IDataReader dr = defaultDB.ExecuteReader("sp_WALLET_SelectItem"
                , ID);

            bool bol = dr.Read();
            dr.Close();

            return bol;
        }

        public bool isExistTransaction(string transaction)
        {
            IDataReader dr = defaultDB.ExecuteReader("sp_WITHDRAW_IsExistTransaction"
                , transaction);

            bool bol = dr.Read();
            dr.Close();

            return bol;
        }

        public int GetQuotaWithDraw(string CodeId)
        {
            try
            {
                return int.Parse(defaultDB.ExecuteScalar("sp_WITHDRAW_getQuota", CodeId).ToString());
            }
            catch (Exception)
            {

                return 0;
            }

        }
        public WITHDRAW SelectItemByCodeId(WITHDRAW obj)
        {
            return defaultDB.ExecuteSprocAccessor<WITHDRAW>("sp_RECEIVE_SelectItemByCodeId"
                , obj.Amount, obj.CodeId, obj.Date_Create).FirstOrDefault();
        }

        public decimal remainGHInMonth(string codeID, DateTime date)
        {
            object remainPH = defaultDB.ExecuteScalar("sp_RECEIVE_SelectRemainGHInMonth", codeID, date);
            if (remainPH == DBNull.Value)
                return 0;
            else
                return Convert.ToDecimal(remainPH);
        }
        public decimal remainGHInDay(string codeID, DateTime date)
        {
            object remainPH = defaultDB.ExecuteScalar("sp_RECEIVE_SelectRemainGHInDay", codeID, date);
            if (remainPH == DBNull.Value)
                return 0;
            else
                return Convert.ToDecimal(remainPH);
        }
		
	}
}
